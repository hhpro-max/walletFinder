import random

# Define the two numbers
number1 = 5  # Replace with your first number
number2 = 10 # Replace with your second number

# Pick a random number from the two numbers
random_number = random.choice([number1, number2])

print(random_number)
'''
TODO
```bash
pip install bitcoin
```

### Generating a P2PKH Address

```python
from bitcoin import *

private_key = random_key()
public_key = privtopub(private_key)
address = pubtoaddr(public_key)

print("Private Key:", private_key)
print("Public Key:", public_key)
print("P2PKH Address:", address)
```

### Generating a P2SH Address

For a simple P2SH address using a single public key:

```python
from bitcoin import *

private_key = random_key()
public_key = privtopub(private_key)
script = 'OP_0 ' + push(public_key)
address = scriptaddr(script)

print("P2SH Address:", address)
```

### Generating a Bech32 (SegWit) Address

Generating a SegWit address is a bit more involved and requires a library that supports SegWit. Hereâ€™s a simplified example using `bit`:

```bash
pip install bit
```

```python
from bit import Key

key = Key()
# Generate SegWit address
segwit_address = key.segwit_address

print("SegWit Address:", segwit_address)
```

---
**Important Notes:**
- The examples provided are for educational purposes. In practical application, you need to ensure the security of the private keys.
- Using real funds with keys generated by this script without proper knowledge could result in losing your bitcoins. Always make sure to understand private key management and security best practices.
- The `bitcoin` library example codes are simplified and may not cover all technical details for creating P2SH or SegWit addresses. For more complex operations and production code, deeper knowledge of Bitcoin's scripting language and SegWit specifications is required.
'''