import random

# Define the two numbers
number1 = 5  # Replace with your first number
number2 = 10 # Replace with your second number

# Pick a random number from the two numbers
random_number = random.choice([number1, number2])

print(random_number)
'''
Bitcoin addresses are essentially digital identifiers that are derived from cryptographic keys, allowing users to send and receive Bitcoin. These addresses can be generated by Bitcoin wallets. The process involves generating a private key first, which is a random number. From this private key, a public key is derived through cryptographic algorithms. The Bitcoin address is then generated from the public key, also using cryptographic methods, typically involving hashing.

There are several types of Bitcoin addresses, including:

1. **P2PKH (Pay to Public Key Hash)** addresses that start with the number "1."
2. **P2SH (Pay to Script Hash)** addresses begin with the number "3." These addresses allow for transactions that require a more complex script to be fulfilled before the bitcoins can be spent.
3. **Bech32 addresses**, which start with "bc1," are used for SegWit (Segregated Witness) transactions. They offer benefits in terms of lower fees and increased efficiency.

Each address type represents different technologies or methods for managing and executing transactions on the Bitcoin network, providing users with options that cater to their needs or preferences for security, efficiency, and cost.
'''



'''
TODO
```bash
pip install bitcoin
```

### Generating a P2PKH Address

```python
from bitcoin import *

private_key = random_key()
public_key = privtopub(private_key)
address = pubtoaddr(public_key)

print("Private Key:", private_key)
print("Public Key:", public_key)
print("P2PKH Address:", address)
```

### Generating a P2SH Address

For a simple P2SH address using a single public key:

```python
from bitcoin import *

private_key = random_key()
public_key = privtopub(private_key)
script = 'OP_0 ' + push(public_key)
address = scriptaddr(script)

print("P2SH Address:", address)
```

### Generating a Bech32 (SegWit) Address

Generating a SegWit address is a bit more involved and requires a library that supports SegWit. Hereâ€™s a simplified example using `bit`:

```bash
pip install bit
```

```python
from bit import Key

key = Key()
# Generate SegWit address
segwit_address = key.segwit_address

print("SegWit Address:", segwit_address)
```

---
**Important Notes:**
- The examples provided are for educational purposes. In practical application, you need to ensure the security of the private keys.
- Using real funds with keys generated by this script without proper knowledge could result in losing your bitcoins. Always make sure to understand private key management and security best practices.
- The `bitcoin` library example codes are simplified and may not cover all technical details for creating P2SH or SegWit addresses. For more complex operations and production code, deeper knowledge of Bitcoin's scripting language and SegWit specifications is required.
'''